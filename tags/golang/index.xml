<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on bing随遇而安</title>
    <link>https://fbbmore.com/tags/golang/</link>
    <description>Recent content in golang on bing随遇而安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 14 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fbbmore.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang获取指定git分支的模块</title>
      <link>https://fbbmore.com/post/2023-06-14-go-get-install-git-branch/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-14-go-get-install-git-branch/</guid>
      <description>本文解答了如何在Golang中获取指定Git仓库分支的模块。</description>
    </item>
    
    <item>
      <title>Slice踩坑日记</title>
      <link>https://fbbmore.com/post/2023-05-31-golang-slice/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-31-golang-slice/</guid>
      <description>本文讲述了在Golang中使用切片（slice）时，遇到的一个问题和解决方法。在项目中使用了map[string][]*openai.Client这种数据结构，用来维护多个标识下的多个openai.Client对象。然而，作者在初始化切片时错误地使用了len(sli)作为切片的容量（capacity），而实际上应该使用0作为切片的长度，指定容量以避免出现问题。</description>
    </item>
    
    <item>
      <title>http断开后，如何继续执行服务端代码</title>
      <link>https://fbbmore.com/post/2023-05-21-http-actively-disconnect/</link>
      <pubDate>Sun, 21 May 2023 11:39:53 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-21-http-actively-disconnect/</guid>
      <description>提到了一个业务需求，需要实现一个服务端调用一个采用 Event Stream 格式响应的接口，并实时将数据响应给客户端。在此背景下，遇到了一个问题：当 HTTP 请求断开后，PHP 脚本会终止执行，导致服务端无法从 Event Stream 接口中获取完整的数据。在思考了多种方案后，提出了两个解决方案。</description>
    </item>
    
    <item>
      <title>goroutine和channel</title>
      <link>https://fbbmore.com/post/2023-05-13-goroutine-channel/</link>
      <pubDate>Sat, 13 May 2023 15:08:41 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-13-goroutine-channel/</guid>
      <description>学习使用golang中的goroutine和channel</description>
    </item>
    
    <item>
      <title>go项目开发热更新-fresh、</title>
      <link>https://fbbmore.com/post/2023-02-25-go-fresh/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-02-25-go-fresh/</guid>
      <description>golang代码开发过程中的热更新工具。</description>
    </item>
    
    <item>
      <title>go workspace简单使用</title>
      <link>https://fbbmore.com/post/2023-01-05-golang-workspace/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-01-05-golang-workspace/</guid>
      <description>go workspace简单使用</description>
    </item>
    
    <item>
      <title>内网goproxy服务搭建配置</title>
      <link>https://fbbmore.com/post/2022-12-10-go-proxy/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-12-10-go-proxy/</guid>
      <description>内网goproxy服务搭建配置</description>
    </item>
    
    <item>
      <title>gin中使用swagger</title>
      <link>https://fbbmore.com/post/2022-11-03-gin-swagger/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-11-03-gin-swagger/</guid>
      <description>安装 ## 使用如下命令安装swag命令 ➜ go go install github.com/swaggo/swag/cmd/swag@latest go: downloading github.com/ghodss/yaml v1.0.0 go: downloading github.com/urfave/cli/v2 v2.3.0 go: downloading golang.org/x/net v0.0.0-20220722155237-a158d28d115b go: downloading golang.org/x/text v0.3.7 go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f go: downloading github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d go: downloading github.com/russross/blackfriday/v2 v2.0.1 go: downloading github.com/shurcooL/sanitized_anchor_name v1.0.0 ➜ go ## 查看是否安装成功 ➜ go swag -v swag version v1.8.7 注释 给代码添加注释，注释主要分为两类，一类是全局注释信息，一般放在入口函数main上。另一类是api注释信息，放在每个每个api处理函数上面
全局注释 示例 // @Title gin framework layout // @Version 0.0.1 // @Description gin framework layout // @host localhost:8888 // @securityDefinitions.</description>
    </item>
    
    <item>
      <title>Go Modules 配置 &amp; 命令</title>
      <link>https://fbbmore.com/post/2022-04-23-go-module-cmd/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-04-23-go-module-cmd/</guid>
      <description>初始化行为 # 创建项目目录 $ mkdir go-gin-example &amp;amp;&amp;amp; cd go-gin-example # 打开go modules开关(目前在1.18中默认值为 auto) $ go env -w GO111MODULE=on # 设置goproxy代理，解决国内外网访问不了导致的包下载不了的问题 该配置有两个参数， # 第一个是 https://goproxy.cn，它是由七牛云背书的一个强大稳定的 Go 模块代理，可以有效地解决你的外网问题； # 第二个是 direct，它是一个特殊的 fallback 选项，它的作用是用于指示 Go 在拉取模块时遇到错误会回源到模块版本的源地址去抓取（比如 GitHub 等）。 $ go env -w GOPROXY=https://goproxy.cn,direct # 初始化Modules 它将会生成 go.mod 文件，需要注意的是 MODULE_PATH 填写的是模块引入路径，你可以根据自己的情况修改路径。 $ go mod init github.com/fbbyqsyea/go-gin-example 基础使用 # go get 拉去最新的依赖 # 拉取最新的版本(优先选取的tag) $ go get golang.org/x/text@latest # 拉取master分支的最新commit $ go get golang.org/x/text@master # 拉取tag指定版本的commit $ go get golang.</description>
    </item>
    
  </channel>
</rss>
