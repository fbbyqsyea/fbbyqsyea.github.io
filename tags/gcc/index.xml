<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcc on bing随遇而安</title>
    <link>/tags/gcc/</link>
    <description>Recent content in gcc on bing随遇而安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>入门makefile</title>
      <link>/post/2022-04-23-makefile/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-23-makefile/</guid>
      <description>make是什么 make是一个自动化构建工具，会在当前目录寻找Makefile或者makefile文件。如果存在，会依据文件的构建规则去完成构建。 当然了，实际商Makefile内都是依据make语法规则，自己编写的shell命令等。
它是一个简答的工具，规则也很简单。在支持的范围内，编译A，依赖B，再编译c，完全没问题。
规则 Makefile由多条规则构成。每个规则都以一个target开头。后跟一个:冒号。冒号后面是一个目标的prerequisites(前置条件)。紧跟着新开一行，必须以tab作为开头。后面紧跟着命令；也就是你希望target需要做的事情。
[target] ... : [prerequisites] ... &amp;lt;tab&amp;gt;[command] ... ... 例子 我们以go-gin-example项目为例编写makefile。在编写之前，需分析构建的先后顺序、依赖项和需要解决的问题。
.PHONY build clean tool lint help all: build build: go build -v . tool: go tool vet . |&amp;amp; grep -v vendor; true gofmt -w . lint: golint ./... clean: rm -rf go-gin-example go clean -i . help: @echo &amp;#34;make: compile packages an dependencies&amp;#34; @echo &amp;#34;make tool: run specified go tool&amp;#34; @echo &amp;#34;make lint: golint .</description>
    </item>
    
  </channel>
</rss>
