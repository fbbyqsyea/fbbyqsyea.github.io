(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{351:function(t,s,e){"use strict";e.r(s);var n=e(5),a=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"embedding-and-sentencetransformers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#embedding-and-sentencetransformers"}},[t._v("#")]),t._v(" Embedding And SentenceTransformers")]),t._v(" "),s("h2",{attrs:{id:"什么是embedding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是embedding"}},[t._v("#")]),t._v(" 什么是Embedding?")]),t._v(" "),s("p",[t._v("嵌入数据（Embedding Data）是一种将高维数据映射到低维空间的技术，通常应用于自然语言处理（NLP）和机器学习领域。在NLP中，词嵌入是一种常见的应用，它将单词映射到连续向量空间中，使得语义相近的词在向量空间中距离较近。")]),t._v(" "),s("h2",{attrs:{id:"什么是sentencetransformers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是sentencetransformers"}},[t._v("#")]),t._v(" 什么是SentenceTransformers？")]),t._v(" "),s("p",[t._v("SentenceTransformers 是一个用于将句子、文本和图像生成嵌入的 Python 框架。您可以使用此框架来计算 100 多种语言的句子/文本嵌入。然后可以将这些嵌入与余弦相似度进行比较，以找到具有相似含义的句子。这对于语义文本相似、语义搜索或释义挖掘非常有用。")]),t._v(" "),s("p",[t._v("该框架基于PyTorch和Transformers，并提供了大量针对各种任务进行调整的预训练模型。此外，微调您自己的模型也很容易。")]),t._v(" "),s("h2",{attrs:{id:"如何使用sentencetransformers生成embedding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用sentencetransformers生成embedding"}},[t._v("#")]),t._v(" 如何使用SentenceTransformers生成Embedding？")]),t._v(" "),s("p",[t._v("下面我将以"),s("code",[t._v("BAAI/bge-large-zh")]),t._v("模型为例，演示如何使用SentenceTransformers来快速生成Embedding，和计算Embedding之间的相似性。")]),t._v(" "),s("h4",{attrs:{id:"安装sentencetransformers框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装sentencetransformers框架"}},[t._v("#")]),t._v(" 安装"),s("code",[t._v("SentenceTransformers")]),t._v("框架")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装SentenceTransformers框架")]),t._v("\n$ pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-U")]),t._v(" sentence-transformers\n")])])]),s("h4",{attrs:{id:"加载bge-large-zh模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载bge-large-zh模型"}},[t._v("#")]),t._v(" 加载"),s("code",[t._v("bge-large-zh")]),t._v("模型")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载 bge-large-zh 模型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sentence_transformers "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" SentenceTransformer\nmodel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SentenceTransformer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BAAI/bge-large-zh'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"计算embedding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算embedding"}},[t._v("#")]),t._v(" 计算"),s("code",[t._v("Embedding")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文本内容")]),t._v("\nsentence "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据线pd快充iphone14适配充电线短款双头Type-C公对公雷电3线适用苹果华为三星小米手机充电宝快充短线便携"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# encode")]),t._v("\nembedding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sentence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("embedding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("embedding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[-0.18654086 -0.4564763  -0.30071327 ... -0.43740666 -0.03736541")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  -0.21082158]] 1")]),t._v("\n")])])]),s("h4",{attrs:{id:"embedding相似性和距离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#embedding相似性和距离"}},[t._v("#")]),t._v(" "),s("code",[t._v("Embedding")]),t._v("相似性和距离")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sentence_transformers "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" util\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算两个向量之间的相似性和距离")]),t._v("\nsentence_1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据线pd快充iphone14适配充电线短款双头Type-C公对公雷电3线适用苹果华为三星小米手机充电宝快充短线便携"')]),t._v("\nsentence_2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小米"')]),t._v("\n\nembedding_1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sentence_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nembedding_2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sentence_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算余弦相似性")]),t._v("\ncosine_similarity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pytorch_cos_sim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("embedding_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" embedding_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算距离（1 - 余弦相似性）")]),t._v("\ndistance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" cosine_similarity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cosine_similarity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" distance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tensor([[0.7151]]) 0.2849287986755371")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);