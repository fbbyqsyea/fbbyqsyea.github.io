(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{346:function(s,t,n){"use strict";n.r(t);var a=n(5),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile改动一行代码-jenkins编译速度提升了将近80倍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile改动一行代码-jenkins编译速度提升了将近80倍"}},[s._v("#")]),s._v(" Dockerfile改动一行代码，Jenkins编译速度提升了将近80倍")]),s._v(" "),t("p",[s._v("如上一篇文章所讲的，因为磁盘空间不足的问题，仔细学习了一下"),t("code",[s._v("docker build cache")]),s._v("相关的内容，学习到")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Docker 构建过程是将 Dockerfile 中的指令转化为一个个构建层（Build Layer）。每一个指令都会生成一个构建层，而所有构建层组合在一起，形成一个完整的镜像。构建过程中的每一步都是无状态的，意味着在同一主机上，对相同的 Dockerfile 执行相同的指令应该得到相同的结果。")])]),s._v(" "),t("li",[t("strong",[s._v("通过"),t("code",[s._v(".dockerignore")]),s._v("文件排除掉日志，编译类库文件等。保证文件的一致性，可以提高缓存构建层的复用")])])]),s._v(" "),t("p",[s._v("发现项目的Dockerfile文件有待改造的地方。通过对项目的简单两部操作，将代码编译速度提升了将近80倍。具体步骤如下:")]),s._v(" "),t("h2",{attrs:{id:"_1-优化dockerfile文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-优化dockerfile文件"}},[s._v("#")]),s._v(" 1. 优化Dockerfile文件")]),s._v(" "),t("h6",{attrs:{id:"原dockerfile文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原dockerfile文件"}},[s._v("#")]),s._v(" 原Dockerfile文件")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编译基础镜像为golang:alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记当前阶段为编译阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" stage=gobuilder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改Alpine Linux的软件包源为阿里云镜像源")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'")]),s._v(" /etc/apk/repositories")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新软件包索引并安装tzdata时区数据包和upx工具")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk update --no-cache && apk add --no-cache tzdata && apk add --no-cache upx")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /builder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁用CGO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" CGO_ENABLED=0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置公司golang代理服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" GOPROXY=http://goproxy.office.xxxxxx.com,direct")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略私有包的sum验签")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" GONOSUMDB=goproxy.office.xxxxxx.com/*")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 赋值当前项目所有文件到容器工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编译项目可执行文件，并压缩生成的二进制文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go build -ldflags="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s -w"')]),s._v(" -tags=jsoniter -o api/bin/main api/main.go "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && upx -q -9 /builder/api/bin/main")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器运行镜像为alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记当前阶段为运行阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" stage=gorunner")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参数指定配置文件名称")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ARG")]),s._v(" config_file")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从builder同步时区")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /usr/share/zoneinfo/Asia/Shanghai /usr/share/zoneinfo/Asia/Shanghai")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" TZ=Asia/Shanghai")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建日志目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RUN mkdir /data/applogs && mkdir /data/weblogs")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从编译容器复制运行二进制文件和配置信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /builder/api/bin/main /app/main")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /builder/api/etc/"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${config_file}")]),s._v(" /app/api.yaml")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./main"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-f"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"api.yaml"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("在上面的Dockerfile "),t("code",[s._v("RUN go build ....")]),s._v("这条命令前增加一个命令"),t("code",[s._v("RUN go mod download")]),s._v(" 生成golang 模块下载的构建层。这样不用每一次去构建模块了。")]),s._v(" "),t("h6",{attrs:{id:"修改后dockerfile文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改后dockerfile文件"}},[s._v("#")]),s._v(" 修改后Dockerfile文件")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编译基础镜像为golang:alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记当前阶段为编译阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" stage=gobuilder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改Alpine Linux的软件包源为阿里云镜像源")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'")]),s._v(" /etc/apk/repositories")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新软件包索引并安装tzdata时区数据包和upx工具")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk update --no-cache && apk add --no-cache tzdata && apk add --no-cache upx")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /builder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁用CGO")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" CGO_ENABLED=0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置公司golang代理服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" GOPROXY=http://goproxy.office.xxxxxx.com,direct")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略私有包的sum验签")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" GONOSUMDB=goproxy.office.xxxxxx.com/*")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 赋值当前项目所有文件到容器工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下载go依赖模块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go mod download")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编译项目可执行文件，并压缩生成的二进制文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go build -ldflags="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s -w"')]),s._v(" -tags=jsoniter -o api/bin/main api/main.go "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && upx -q -9 /builder/api/bin/main")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器运行镜像为alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记当前阶段为运行阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" stage=gorunner")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参数指定配置文件名称")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ARG")]),s._v(" config_file")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从builder同步时区")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /usr/share/zoneinfo/Asia/Shanghai /usr/share/zoneinfo/Asia/Shanghai")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" TZ=Asia/Shanghai")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建日志目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RUN mkdir /data/applogs && mkdir /data/weblogs")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定工作目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从编译容器复制运行二进制文件和配置信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /builder/api/bin/main /app/main")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /builder/api/etc/"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${config_file}")]),s._v(" /app/api.yaml")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./main"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-f"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"api.yaml"')]),s._v("]")]),s._v("\n")])])]),t("h2",{attrs:{id:"_2-新增-dockerignore文件排除掉日志-编译类库文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-新增-dockerignore文件排除掉日志-编译类库文件"}},[s._v("#")]),s._v(" 2. 新增"),t("code",[s._v(".dockerignore")]),s._v("文件排除掉日志，编译类库文件")]),s._v(" "),t("p",[s._v("排除掉相关文件的"),t("code",[s._v("copy")]),s._v("操作。")]),s._v(" "),t("div",{staticClass:"language-.dockerignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# Ignore development and editor-related files\n.DS_Store\n\n# Ignore version control directories\n.git/\n\n# Exclude specific directories and their contents\ntmp/\n")])])]),t("h2",{attrs:{id:"效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#效果"}},[s._v("#")]),s._v(" 效果")]),s._v(" "),t("h6",{attrs:{id:"编译时间对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译时间对比"}},[s._v("#")]),s._v(" 编译时间对比")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/jenkins-docker-build-list.jpg",alt:"docker-build-df"}})]),s._v(" "),t("h6",{attrs:{id:"编译缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译缓存"}},[s._v("#")]),s._v(" 编译缓存")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/jenkins-docker-cache.jpg",alt:"docker-build-df"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);