<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bing随遇而安</title>
    <link>https://fbbmore.com/post/</link>
    <description>Recent content in Posts on bing随遇而安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fbbmore.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Embedding And SentenceTransformers</title>
      <link>https://fbbmore.com/post/2023-08-19-sentence-transformers/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-08-19-sentence-transformers/</guid>
      <description>介绍嵌入技术及其在自然语言处理中的应用，以及SentenceTransformers框架的使用。嵌入可将高维数据映射到低维空间，常用于词嵌入。SentenceTransformers框架能生成句子嵌入向量，支持不同语言的文本嵌入计算，并通过余弦相似度比较句子相似性。</description>
    </item>
    
    <item>
      <title>Ubuntu系统安装和以守护进程运行jupyter</title>
      <link>https://fbbmore.com/post/2023-08-19-ubuntu-install-and-systemd-run-jupyter/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-08-19-ubuntu-install-and-systemd-run-jupyter/</guid>
      <description>介绍在Ubuntu系统上安装并以守护进程方式运行Jupyter的过程。Jupyter是开源的交互式计算环境，最初用于支持Python编程语言的数据分析和可视化。它提供基于Web的界面，允许用户在浏览器中创建和分享包含代码、方程、图表、可视化结果和文本说明的文档。Jupyter支持多种编程语言内核，允许在同一环境中使用不同编程语言进行交互式计算。文章详细介绍了在Ubuntu上使用conda创建和配置Jupyter环境，以及通过systemd以守护进程方式启动Jupyter的步骤。</description>
    </item>
    
    <item>
      <title>Docker build导致的磁盘空间不足问题</title>
      <link>https://fbbmore.com/post/2023-07-27-docker-buildx/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-07-27-docker-buildx/</guid>
      <description>本文介绍了在使用Docker构建过程中遇到的磁盘空间不足问题，并解释了产生该问题的原因，即Docker build过程中产生的缓存占用了大量磁盘空间。通过docker system df命令查看了Docker的磁盘占用情况，并通过执行docker builder prune命令清理了缓存。文章还探讨了Docker构建缓存的机制，解释了为何需要构建缓存以及如何合理清理它。最后，提供了关于清理不再使用的镜像和容器、使用.dockerignore文件优化构建缓存、使用&amp;ndash;no-cache标志禁用缓存以及定期清理构建缓存的方法和注意事项。</description>
    </item>
    
    <item>
      <title>Dockerfile改动一行代码，Jenkins编译速度提升了将近80倍</title>
      <link>https://fbbmore.com/post/2023-07-27-docker-cache/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-07-27-docker-cache/</guid>
      <description>通过优化Dockerfile，成功将Jenkins编译速度提升了近80倍。通过学习Docker构建缓存机制，忽略无关文件、添加构建层以及使用缓存等方法，对项目的Dockerfile进行改进。原始Dockerfile的基础上，增加了RUN go mod download命令，在构建层中下载Go依赖模块，避免重复构建模块。此外，还创建了.dockerignore文件来排除无关文件，进一步提高了缓存构建层的复用率。通过这些优化，在Jenkins中的编译时间得到了显著改善。这一经验不仅有效提升了构建效率，也为开发流程带来了重大的改进。</description>
    </item>
    
    <item>
      <title>docker 私有仓库设置忽略https</title>
      <link>https://fbbmore.com/post/2023-06-25-docker-ignore-https/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-25-docker-ignore-https/</guid>
      <description>本文介绍了在使用公司私有Docker仓库时，由于没有HTTPS，如何设置私有仓库在push和pull镜像时忽略HTTPS验证。步骤包括编辑Docker Daemon的配置文件，在insecure-registries配置项中添加私有仓库的地址，以告知Docker Daemon使用不安全的HTTP协议进行通信。文章强调使用insecure-registries会带来一定的安全风险，因此在生产环境中建议使用安全的HTTPS连接与镜像仓库通信。</description>
    </item>
    
    <item>
      <title>解决 Git 文件大小写不跟踪的问题</title>
      <link>https://fbbmore.com/post/2023-06-25-git-core-ignorecase/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-25-git-core-ignorecase/</guid>
      <description>解决 Git 文件大小写不跟踪的问题</description>
    </item>
    
    <item>
      <title>golang获取指定git分支的模块</title>
      <link>https://fbbmore.com/post/2023-06-14-go-get-install-git-branch/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-14-go-get-install-git-branch/</guid>
      <description>本文解答了如何在Golang中获取指定Git仓库分支的模块。</description>
    </item>
    
    <item>
      <title>三步生成研测https证书</title>
      <link>https://fbbmore.com/post/2023-06-14-three-step-https-nginx/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-14-three-step-https-nginx/</guid>
      <description>介绍如何在研发测试环境中快速生成支持HTTPS的证书。</description>
    </item>
    
    <item>
      <title>git如何初始化master分支</title>
      <link>https://fbbmore.com/post/2023-06-06-git-branch-rename/</link>
      <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-06-06-git-branch-rename/</guid>
      <description>本文介绍了在Git中如何初始化master分支。</description>
    </item>
    
    <item>
      <title>Slice踩坑日记</title>
      <link>https://fbbmore.com/post/2023-05-31-golang-slice/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-31-golang-slice/</guid>
      <description>本文讲述了在Golang中使用切片（slice）时，遇到的一个问题和解决方法。在项目中使用了map[string][]*openai.Client这种数据结构，用来维护多个标识下的多个openai.Client对象。然而，作者在初始化切片时错误地使用了len(sli)作为切片的容量（capacity），而实际上应该使用0作为切片的长度，指定容量以避免出现问题。</description>
    </item>
    
    <item>
      <title>http断开后，如何继续执行服务端代码</title>
      <link>https://fbbmore.com/post/2023-05-21-http-actively-disconnect/</link>
      <pubDate>Sun, 21 May 2023 11:39:53 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-21-http-actively-disconnect/</guid>
      <description>提到了一个业务需求，需要实现一个服务端调用一个采用 Event Stream 格式响应的接口，并实时将数据响应给客户端。在此背景下，遇到了一个问题：当 HTTP 请求断开后，PHP 脚本会终止执行，导致服务端无法从 Event Stream 接口中获取完整的数据。在思考了多种方案后，提出了两个解决方案。</description>
    </item>
    
    <item>
      <title>Mysql TEXT类型到底能存储多少字符？</title>
      <link>https://fbbmore.com/post/2023-05-15-mysql-text/</link>
      <pubDate>Mon, 15 May 2023 15:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-15-mysql-text/</guid>
      <description>重温text可存储字符数</description>
    </item>
    
    <item>
      <title>PHP register shutdown function</title>
      <link>https://fbbmore.com/post/2023-05-14-php-register-shutdown-function/</link>
      <pubDate>Sun, 14 May 2023 18:59:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-14-php-register-shutdown-function/</guid>
      <description>介绍php的register_shutdown_function函数</description>
    </item>
    
    <item>
      <title>goroutine和channel</title>
      <link>https://fbbmore.com/post/2023-05-13-goroutine-channel/</link>
      <pubDate>Sat, 13 May 2023 15:08:41 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-13-goroutine-channel/</guid>
      <description>学习使用golang中的goroutine和channel</description>
    </item>
    
    <item>
      <title>Conda教程</title>
      <link>https://fbbmore.com/post/2023-05-09-conda/</link>
      <pubDate>Tue, 09 May 2023 23:20:42 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-09-conda/</guid>
      <description>conda的基础使用。</description>
    </item>
    
    <item>
      <title>PHP Curl Write Function</title>
      <link>https://fbbmore.com/post/2023-05-09-php-curl-write-function/</link>
      <pubDate>Tue, 09 May 2023 14:23:56 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-05-09-php-curl-write-function/</guid>
      <description>学习使用php curl请求中的CURLOPT_WRITEFUNCTION callback函数</description>
    </item>
    
    <item>
      <title>go项目开发热更新-fresh、</title>
      <link>https://fbbmore.com/post/2023-02-25-go-fresh/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-02-25-go-fresh/</guid>
      <description>golang代码开发过程中的热更新工具。</description>
    </item>
    
    <item>
      <title>go workspace简单使用</title>
      <link>https://fbbmore.com/post/2023-01-05-golang-workspace/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2023-01-05-golang-workspace/</guid>
      <description>go workspace简单使用</description>
    </item>
    
    <item>
      <title>GIT ssh config</title>
      <link>https://fbbmore.com/post/2022-12-10-git-ssh-config/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-12-10-git-ssh-config/</guid>
      <description>Host * HostkeyAlgorithms +ssh-rsa PubkeyAcceptedKeyTypes +ssh-rsa # [github.com] Host github.com HostName github.com Port 22 User git IdentityFile ~/.ssh/id_rsa </description>
    </item>
    
    <item>
      <title>内网goproxy服务搭建配置</title>
      <link>https://fbbmore.com/post/2022-12-10-go-proxy/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-12-10-go-proxy/</guid>
      <description>内网goproxy服务搭建配置</description>
    </item>
    
    <item>
      <title>jwt学习和使用</title>
      <link>https://fbbmore.com/post/2022-11-05-jwt/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-11-05-jwt/</guid>
      <description>学习 我们通过 jwt.io网站关于jwt的介绍文章(https://jwt.io/introduction)来学习jwt。 jwt是什么？(What is JSON Web Token?) 原文 JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.
Although JWTs can be encrypted to also provide secrecy between parties, we will focus on signed tokens.</description>
    </item>
    
    <item>
      <title>gin中使用swagger</title>
      <link>https://fbbmore.com/post/2022-11-03-gin-swagger/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-11-03-gin-swagger/</guid>
      <description>安装 ## 使用如下命令安装swag命令 ➜ go go install github.com/swaggo/swag/cmd/swag@latest go: downloading github.com/ghodss/yaml v1.0.0 go: downloading github.com/urfave/cli/v2 v2.3.0 go: downloading golang.org/x/net v0.0.0-20220722155237-a158d28d115b go: downloading golang.org/x/text v0.3.7 go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f go: downloading github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d go: downloading github.com/russross/blackfriday/v2 v2.0.1 go: downloading github.com/shurcooL/sanitized_anchor_name v1.0.0 ➜ go ## 查看是否安装成功 ➜ go swag -v swag version v1.8.7 注释 给代码添加注释，注释主要分为两类，一类是全局注释信息，一般放在入口函数main上。另一类是api注释信息，放在每个每个api处理函数上面
全局注释 示例 // @Title gin framework layout // @Version 0.0.1 // @Description gin framework layout // @host localhost:8888 // @securityDefinitions.</description>
    </item>
    
    <item>
      <title>GIT Init</title>
      <link>https://fbbmore.com/post/2022-10-23-git-init/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-10-23-git-init/</guid>
      <description>从命令行创建一个新的仓库 touch README.md git init git add README.md git commit -m &amp;#34;first commit&amp;#34; git remote add origin git@github.com:fbbyqsyea/fbbyqsyea.github.io.git git push -u origin master 从命令行推送已经创建的仓库 git remote add origin git@github.com:fbbyqsyea/fbbyqsyea.github.io.git git push -u origin master </description>
    </item>
    
    <item>
      <title>常用Docker</title>
      <link>https://fbbmore.com/post/2022-10-23-common-docker-cmd/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-10-23-common-docker-cmd/</guid>
      <description>mysql $ docker run --name mysql \ -p 3306:3306 \ --privileged=true \ --restart=always \ -e MYSQL_ROOT_PASSWORD=&amp;#39;Aa!23456&amp;#39; \ -d mysql:5.7 redis $ docker run --name redis \ -p 6379:6379 \ --privileged=true \ --restart=always \ -d redis redis-server etcd $ docker run -d --name Etcd-server \ -p 2379:2379 \ -p 2380:2380 \ --privileged=true \ --restart=always \ --env ALLOW_NONE_AUTHENTICATION=yes \ bitnami/etcd:latest </description>
    </item>
    
    <item>
      <title>multipass教程</title>
      <link>https://fbbmore.com/post/2022-07-05-multipass/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-07-05-multipass/</guid>
      <description>How to create an instance create a instance ## 创建一个默认实例 $ multipass launch Launched: enjoyed-coatimundi ## 查看实例详情 $ multipass info enjoyed-coatimundi Name: enjoyed-coatimundi State: Running IPv4: 192.168.64.2 Release: Ubuntu 20.04.4 LTS Image hash: 75a04c7eed58 (Ubuntu 20.04 LTS) Load: 0.05 0.15 0.08 Disk usage: 1.4G out of 4.7G Memory usage: 139.4M out of 976.9M Mounts: -- create an instance with a specific image ## 查找可用的镜像 $ multipass find Image Aliases Version Description snapcraft:core18 18.</description>
    </item>
    
    <item>
      <title>k8s containerd容器驱动安装</title>
      <link>https://fbbmore.com/post/2022-06-11-centos-install-containerd/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-06-11-centos-install-containerd/</guid>
      <description>安装yum-utils工具 $ sudo yum install -y yum-utils 添加阿里云docker镜像仓库 $ sudo yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装containerd $ sudo yum install containerd -y 初始化containerd配置信息 $ sudo madir /etc/containerd $ sudo containerd config default &amp;gt; /etc/containerd/config.toml 修改containerd sand_box 和 Cgroup $ vim /etc/containerd/config.toml # 修改sand_box # 查找sand_image 将k8s.gcr.io/pause:3.6 替换成阿里源 registry.aliyuncs.com/google_containers/pause:3.6 # 修改Cgroup # 查找SystemdCgroup 将false 改为 true 启动containerd $ sudo systemctl daemon-reload $ sudo systemctl enable containerd $ sudo systemctl start containerd </description>
    </item>
    
    <item>
      <title>Centos7中配置开机自动执行不生效问题</title>
      <link>https://fbbmore.com/post/2022-05-10-centos-auto-run-unexecute-question/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-05-10-centos-auto-run-unexecute-question/</guid>
      <description>正常配置 我们正常的业务中，有很多需要开启自动执行的诉求，比如挂在数据盘到数据系统。
打开rc.local文件 $ sudo vim /etc/rc.d/rc.local 在文件最后新增如下内容 mount -t cifs //192.168.73.1/webdata/golang /usr/local/webdata/golang -o uid=1000,gid=1000,username=share,password=share123456 这个时候，正常来说下次启动的时候会自动挂载文件，但是并没有。
不生效原因 从CentOS7.0开始，/etc/rc.d/rc.local文件的初始权限变成了644，默认是不使用/etc/rc.local文件作为开机启动了， 并且rc-local.service服务的状态是disabled状态。所以我们需要从下面两个方面检查。
给/etc/rc.d/rc.local文件新增执行权限 $ sudo chmod a+x /etc/rc.d/rc.local 启动rc-local.service $ sudo systemctl enable rc-local.service $ sudo systemctl start rc-local.service </description>
    </item>
    
    <item>
      <title>centos安装docker</title>
      <link>https://fbbmore.com/post/2022-05-08-centos-install-docker/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-05-08-centos-install-docker/</guid>
      <description>删除老版本的docker $ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine 安装yum-utils工具 添加docker源 $ sudo yum install -y yum-utils $ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 替换阿里云docker镜像仓库 $ sudo yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 选择安装版本 docker支持安装尝鲜版(nightly)、测试版(test)和稳定版(默认版本)
尝鲜版 $ sudo yum-config-manager --enable docker-ce-nightly 测试版 $ sudo yum-config-manager --enable docker-ce-test 安装docker 安装最新版的docker $ sudo yum install docker-ce docker-ce-cli containerd.io 安装指定版本的docker 查找支持的版本 $ yum list docker-ce --showduplicates | sort -r 安装指定的版本 $ sudo yum install docker-ce-&amp;lt;VERSION_STRING&amp;gt; docker-ce-cli-&amp;lt;VERSION_STRING&amp;gt; containerd.</description>
    </item>
    
    <item>
      <title>docker国内镜像源</title>
      <link>https://fbbmore.com/post/2022-05-06-docker/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-05-06-docker/</guid>
      <description>docker国内镜像加速地址 docker中国区官方镜像 https://registry.docker-cn.com 网易 http://hub-mirror.c.163.com ustc(中科大) https://docker.mirrors.ustc.edu.cn 配置流程 在/etc/docker下新建daemon.json配置文件 # vim /etc/docker/daemon.json 在daemon.json文件中写入如下配置信息 { &amp;#34;registry-mirrors&amp;#34;:[ &amp;#34;https://registry.docker-cn.com&amp;#34;, &amp;#34;http://hub-mirror.c.163.com&amp;#34;, &amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34; ] } 重新加载配置文件 $ systemctl daemon-reload 重启docker # systemctl restart docker 查看镜像源配置信息 # docker info ...... Registry Mirrors: https://registry.docker-cn.com/ http://hub-mirror.c.163.com/ https://docker.mirrors.ustc.edu.cn/ </description>
    </item>
    
    <item>
      <title>curl简易教程</title>
      <link>https://fbbmore.com/post/2022-04-23-curl/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-04-23-curl/</guid>
      <description>简介 curl是一个命令行工具，作用是发送网络请求，然后获取数据，显示在标准输出(stdout)上面。支持多种协议。
示例 查看网页源码 $ curl www.sina.com 保存网页源码 $ curl www.sina.com -o index.html 自动跳转 $ curl -L www.sina.com 显示网页头信息 -i 显示网页头信息和内容 -I只显示网页头信息
$ curl -i www.sina.com $ curl -I www.sina.com 显示通信过程 -v参数可以显示一次完整的http通信过程。包括端口连接和http request头信息
$ curl -v www.sina.com 显示更详细的通信过程 $ curl --trace output.txt www.sina.com $ curl --trace-ascii output.txt www.sina.com 发送表单信息 GET只需要把数据附在链接后面即可
$ curl example.com?a=1&amp;amp;b=2 POST请求必须把数据和链接分开 使用-d或者&amp;ndash;data来发送数据 需要显式的声明post方法
$ curl -X POST --data &amp;#34;data=111&amp;#34; example.com/form.cgi # 如果数据没有经过表单编码 可以使用--data-urlencode进行编码 $ curl -X POST --data-urlencode &amp;#34;data=测试数据&amp;#34; &amp;#34;http://httpbin.</description>
    </item>
    
    <item>
      <title>Go Modules 配置 &amp; 命令</title>
      <link>https://fbbmore.com/post/2022-04-23-go-module-cmd/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-04-23-go-module-cmd/</guid>
      <description>初始化行为 # 创建项目目录 $ mkdir go-gin-example &amp;amp;&amp;amp; cd go-gin-example # 打开go modules开关(目前在1.18中默认值为 auto) $ go env -w GO111MODULE=on # 设置goproxy代理，解决国内外网访问不了导致的包下载不了的问题 该配置有两个参数， # 第一个是 https://goproxy.cn，它是由七牛云背书的一个强大稳定的 Go 模块代理，可以有效地解决你的外网问题； # 第二个是 direct，它是一个特殊的 fallback 选项，它的作用是用于指示 Go 在拉取模块时遇到错误会回源到模块版本的源地址去抓取（比如 GitHub 等）。 $ go env -w GOPROXY=https://goproxy.cn,direct # 初始化Modules 它将会生成 go.mod 文件，需要注意的是 MODULE_PATH 填写的是模块引入路径，你可以根据自己的情况修改路径。 $ go mod init github.com/fbbyqsyea/go-gin-example 基础使用 # go get 拉去最新的依赖 # 拉取最新的版本(优先选取的tag) $ go get golang.org/x/text@latest # 拉取master分支的最新commit $ go get golang.org/x/text@master # 拉取tag指定版本的commit $ go get golang.</description>
    </item>
    
    <item>
      <title>入门makefile</title>
      <link>https://fbbmore.com/post/2022-04-23-makefile/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-04-23-makefile/</guid>
      <description>make是什么 make是一个自动化构建工具，会在当前目录寻找Makefile或者makefile文件。如果存在，会依据文件的构建规则去完成构建。 当然了，实际商Makefile内都是依据make语法规则，自己编写的shell命令等。
它是一个简答的工具，规则也很简单。在支持的范围内，编译A，依赖B，再编译c，完全没问题。
规则 Makefile由多条规则构成。每个规则都以一个target开头。后跟一个:冒号。冒号后面是一个目标的prerequisites(前置条件)。紧跟着新开一行，必须以tab作为开头。后面紧跟着命令；也就是你希望target需要做的事情。
[target] ... : [prerequisites] ... &amp;lt;tab&amp;gt;[command] ... ... 例子 我们以go-gin-example项目为例编写makefile。在编写之前，需分析构建的先后顺序、依赖项和需要解决的问题。
.PHONY build clean tool lint help all: build build: go build -v . tool: go tool vet . |&amp;amp; grep -v vendor; true gofmt -w . lint: golint ./... clean: rm -rf go-gin-example go clean -i . help: @echo &amp;#34;make: compile packages an dependencies&amp;#34; @echo &amp;#34;make tool: run specified go tool&amp;#34; @echo &amp;#34;make lint: golint .</description>
    </item>
    
    <item>
      <title>linux机器时间同步</title>
      <link>https://fbbmore.com/post/2022-03-17-linux-time-sync/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-03-17-linux-time-sync/</guid>
      <description>修改时区 $ sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 网络时间同步 $ sudo /usr/sbin/ntpdate -u cn.pool.ntp.org 写入硬件时间 # 服务器每次重启都会参考硬件的时间，所以需要将当前系统的时间写入到硬件。 # 查看当前硬件时间 $ hwclock -r # 写入硬件时间 $ hwclock -w 配置时间自动同步 配置开机时间自检 # 向linux系统开机自启动执行文件添加自检任务 $ vim /etc/rc.d/rc.local $ /usr/sbin/ntpdate -u cn.pool.ntp.org&amp;gt; /var/log/ntpdate_boot.log 2&amp;gt;&amp;amp;1; /sbin/hwclock -w 配置定期时间自检 # 配置定时任务 每10分钟执行时间自检任务 $ sudo crontab -e $ 00 10 * * * /usr/sbin/ntpdate -u cn.pool.ntp.org &amp;gt; /var/log/ntpdate_cron.log 2&amp;gt;&amp;amp;1; /sbin/hwclock -w </description>
    </item>
    
    <item>
      <title>启动k8s服务</title>
      <link>https://fbbmore.com/post/2022-03-17-start-k8s/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-03-17-start-k8s/</guid>
      <description>kubeadm、kubelet、kubectl简介 参照前一篇的文章，在k8s-master和k8s-node节点上都安装了kubeadm、kubelet、kubectl服务。
Kubeadm是一个提供了 kubeadm init 和 kubeadm join 的工具，作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践。kubeadm 通过执行必要的操作来启动和运行最小可用集群。 按照设计，它只关注启动引导，而非配置机器。同样的， 安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard、 监控方案、以及特定云平台的扩展，都不在讨论范围内。相反，我们希望在 kubeadm 之上构建更高级别以及更加合规的工具， 理想情况下，使用 kubeadm 作为所有部署工作的基准将会更加易于创建一致性集群。
kubelet 是在每个 Node 节点上运行的主要 “节点代理”。它可以使用以下之一向 apiserver 注册： 主机名（hostname）；覆盖主机名的参数；某云驱动的特定逻辑。kubelet 是基于 PodSpec 来工作的。每个 PodSpec 是一个描述 Pod 的 YAML 或 JSON 对象。 kubelet 接受通过各种机制（主要是通过 apiserver）提供的一组 PodSpec，并确保这些 PodSpec 中描述的容器处于运行状态且运行状况良好。 kubelet 不管理不是由 Kubernetes 创建的容器。
你可以使用 Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。 你可以通过设置 KUBECONFIG 环境变量或设置 &amp;ndash;kubeconfig 参数来指定其它 kubeconfig 文件。</description>
    </item>
    
    <item>
      <title>Centos安装k8s</title>
      <link>https://fbbmore.com/post/2022-03-15-centos-install-k8s/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fbbmore.com/post/2022-03-15-centos-install-k8s/</guid>
      <description>准备开始 一台兼容的 Linux 主机。Kubernetes 项目为基于 Debian 和 Red Hat 的 Linux 发行版以及一些不提供包管理器的发行版提供通用的指令 每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)2 CPU 核或更多 集群中的所有机器的网络彼此均能相互连接(公网和内网都可以) 节点之中不可以有重复的主机名、MAC 地址或 product_uuid。请参见这里了解更多详细信息。 开启机器上的某些端口。请参见这里 了解更多详细信息。 禁用交换分区。为了保证 kubelet 正常工作，你 必须 禁用交换分区。 确保每个节点上MAC地址和product_uuid的唯一性 你可以使用命令 ip link 或 ifconfig -a 来获取网络接口的 MAC 地址 可以使用 sudo cat /sys/class/dmi/id/product_uuid 命令对 product_uuid 校验 检测网络适配器 如果你有一个以上的网络适配器，同时你的 Kubernetes 组件通过默认路由不可达，我们建议你预先添加 IP 路由规则， 这样 Kubernetes 集群就可以通过对应的适配器完成连接
允许 iptables 检查桥接流量 确保 br_netfilter 模块被加载。这一操作可以通过运行 lsmod | grep br_netfilter 来完成。 若要显式加载该模块，可执行 sudo modprobe br_netfilter。</description>
    </item>
    
  </channel>
</rss>
